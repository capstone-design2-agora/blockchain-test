feat: Add blockchain consensus algorithm performance testing framework

## 주요 추가사항

### 스마트 컨트랙트 & 배포
- VotingWithNFT.sol: NFT 기반 투표 시스템 구현
- deploy_contract.js: 컨트랙트 배포 스크립트 (10/24-26 실험 사용)
- setup_and_deploy.sh: 네트워크 시작 + 의존성 설치 + 배포 자동화 (신규)
- 위치: quorum-lab/ (실제 실험 구성과 동일)

### 벤치마크 시스템
- benchmark.py: 성능 측정 핵심 스크립트
- run_raft_benchmarks.sh: Raft 합의 알고리즘 벤치마크 자동화
- run_qbft_benchmarks.sh: QBFT 합의 알고리즘 벤치마크 자동화
- check_nft_receipt.py: NFT 트랜잭션 검증 도구
- check_csv_results.py: CSV 결과 분석 도구

### 실험 결과
- test_result/: IBFT, QBFT, Raft 각 합의 알고리즘별 벤치마크 결과 (샘플)
- BENCHMARK_ANALYSIS_REPORT.md: 종합 분석 리포트

### 문서화 & 라이선스
- README.md: 프로젝트 개요 및 실험 재현 가이드
- LICENSE: MIT 라이선스 + 써드파티 라이선스 정보
- NOTICE: Apache-2.0 준수를 위한 attribution 파일

## 변경사항
- .gitignore: 실험 결과 및 생성 파일 관리

## 삭제
- 임시 계획 문서 (implementation-plan.md, phase6-monitoring.md, test-plan.md)
- 개별 합의 알고리즘용 docker-compose 파일들 (실험에 미사용)

## 실험 환경 (10/24-26)
- 네트워크: quorum-test-network (단일 docker-compose.yml)
- 합의 알고리즘 선택: .env 파일의 CONSENSUS 변수
- 배포 방식: quorum-lab/deploy_contract.js 사용
- RPC 엔드포인트: http://localhost:8545 (validator1)
- Artifacts 위치: quorum-lab/artifacts/

## 실험 재현
1. 자동: ./quorum-lab/setup_and_deploy.sh (모든 설정 자동)
2. 수동: README의 단계별 가이드 참조

## 라이선스 준수
- 기반 프로젝트: Quorum Dev Quickstart (Apache-2.0)
- 우리 프로젝트: MIT License
- 모든 attribution 및 NOTICE 파일 포함
- Apache-2.0 요구사항 완전 준수

기반: Quorum Dev Quickstart (ConsenSys) - Apache-2.0
실험 기간: 2024-10-24 ~ 2024-10-26
실험 목적: 서로 다른 합의 알고리즘의 성능 비교 분석
